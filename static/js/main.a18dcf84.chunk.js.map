{"version":3,"sources":["InputForm.js","TodoList.js","FilterButtons.js","TodoHeader.js","App.js","reportWebVitals.js","index.js"],"names":["InputForm","props","todos","setTodos","inputText","setInputText","className","onSubmit","event","preventDefault","assignment","isCompleted","id","Date","getTime","value","onChange","target","type","TodoList","filterTodos","setEditingInput","editingInput","isEditing","setIsEditing","handleClickInTodoItem","btnType","updateTodo","map","todo","console","log","completeTodo","filter","deleteTodo","handleSubmit","updateTodoItem","editTodoItem","stopEditingTodoItem","Noto","length","onClick","htmlFor","FilterButtons","setFilterState","filterState","handleClick","filterType","isAll","isActive","TodoHeader","currentDate","month","date","day","App","useState","setFilterTodos","setCurrentDate","useEffect","monthList","num","dayOfWeekList","tempMonth","getMonth","tempDay","getDay","getDate","getCurrentDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a18dcf84.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputForm = (props) => {\n  const { todos, setTodos, inputText, setInputText } = props;\n\n  // Events\n  function handleChange (event) {\n    setInputText(event.target.value);\n  }\n  function handleSubmit (event) {\n    event.preventDefault();\n    setTodos([\n      ...todos,\n      { assignment: inputText, isCompleted: false, id: new Date().getTime() }\n    ]);\n    setInputText('');\n  }\n\n  return (\n    <form\n      className=\"todo-input-form\"\n      onSubmit={handleSubmit}\n    >\n\n      <div className=\"input-wrapper\">\n        <input\n          value={inputText}\n          onChange={handleChange}\n          className=\"todo-input\"\n        />\n        <button\n          type=\"submit\"\n          className=\"todo-input-submit\"\n        >+\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default InputForm;\n","import React from 'react';\n\nconst TodoList = (props) => {\n  const { todos, setTodos, filterTodos, setEditingInput, editingInput, isEditing, setIsEditing } = props;\n\n  // Click Event In Todo Item\n  function handleClickInTodoItem (btnType, id) {\n    if (btnType === 'complete') {\n      completeTodo(id);\n    } else if (btnType === 'edit') {\n      console.log(btnType, id);\n      setIsEditing(id);\n    } else if (btnType === 'delete') {\n      deleteTodo(id);\n    }\n  }\n  function completeTodo (id) {\n    const updateTodo = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.isCompleted = !todo.isCompleted;\n      }\n      return todo;\n    });\n    console.log(updateTodo);\n    setTodos(updateTodo);\n  }\n  function deleteTodo (id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  // Submit Event\n  function handleSubmit (event, id) {\n    event.preventDefault();\n    editTodoItem(id);\n  }\n\n  // Save Editing\n  function editTodoItem (id) {\n    const updateTodoItem = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.assignment = editingInput;\n      }\n      return todo;\n    });\n    setTodos(updateTodoItem);\n    setIsEditing(null);\n    setEditingInput('');\n  }\n\n  // Cancel Editing\n  function stopEditingTodoItem () {\n    setIsEditing(null);\n  }\n\n  // Noto do\n  function Noto (props) {\n    const { todos } = props;\n    if (todos.length === 0) {\n      return (\n        <p className=\"nothing-to-do\">Nothing To Do</p>\n      )\n    } return null\n  }\n\n  return (\n    <div className=\"todo-list-container\">\n      <Noto todos={todos} />\n      <ul className=\"todo-list\">\n        {filterTodos.map((todo) => <li className=\"todo-item-wrapper\" key={todo.id}>\n          {isEditing === todo.id ? (\n            <div className=\"todo-edit-item\">\n              <form\n                onSubmit={(event) => handleSubmit(event, todo.id)}\n              >\n                <p>把 {todo.assignment} 改成</p>\n                <input\n                  onChange={(event) => setEditingInput(event.target.value)}\n                />\n                <div className=\"edit-button-group\">\n                  <button type=\"button\" onClick={stopEditingTodoItem}>Cancel</button>\n                  <button type=\"submit\">Save</button>\n                </div>\n              </form>\n            </div>\n          ) : (\n            <div className=\"todo-item\">\n              <div className=\"todo-complete-item\">\n                <input\n                  type=\"checkbox\"\n                  id={todo.id}\n                  onChange={() => handleClickInTodoItem('complete', todo.id)}\n                  className={todo.isCompleted ? 'todo-is-completed' : 'todo-is-not-completed-yet'}\n                />\n                <label\n                  className={todo.isCompleted ? 'todo-is-completed-text' : ''}\n                  htmlFor={todo.id}>\n                  {todo.assignment}\n                </label>\n              </div>\n              <div className=\"todo-button-group\">\n                <button onClick={() => handleClickInTodoItem('edit', todo.id)}><i className=\"fas fa-edit\"></i></button>\n                <button onClick={() => handleClickInTodoItem('delete', todo.id)}><i className=\"fas fa-trash-alt\"></i></button>\n              </div>\n            </div>\n          )}\n        </li>\n        )}\n      </ul>\n    </div >\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nconst FilterButtons = (props) => {\n  const { setFilterState, filterState } = props;\n\n  function handleClick (filterType) {\n    isAll(filterType);\n    isActive(filterType);\n    isCompleted(filterType);\n  }\n\n  // 事件判斷\n  function isAll (filterType) {\n    if (filterType === 'all') {\n      setFilterState(filterType);\n    }\n  }\n  function isActive (filterType) {\n    if (filterType === 'active') {\n      setFilterState(filterType);\n    }\n  }\n  function isCompleted (filterType) {\n    if (filterType === 'completed') {\n      setFilterState(filterType);\n    }\n  }\n\n  return (\n    <div className=\"filter-buttons-container\">\n      <button\n        className={filterState === 'all' ? \"filter-button-is-selected\" : \"default-filter-button\"} onClick={() => handleClick('all')}>ALL</button>\n      <button\n        className={filterState === 'active' ? \"filter-button-is-selected\" : \"default-filter-button\"} onClick={() => handleClick('active')}>ACTIVE</button>\n      <button\n        className={filterState === 'completed' ? \"filter-button-is-selected\" : \"default-filter-button\"} onClick={() => handleClick('completed')}>COMPLETED</button>\n    </div>\n  )\n}\n\nexport default FilterButtons;\n","import React from 'react';\n\nconst TodoHeader = ({ currentDate, todos }) => {\n  const { month, date, day } = currentDate;\n\n  return (\n    <div className=\"todo-header\">\n      <div className=\"date-wrapper\">\n        <div className=\"date\">\n          <span>{day},</span> {date}th\n        </div>\n        <div className=\"month\">{month}</div>\n      </div>\n      <div className=\"task-wrapper\">\n        Total Tasks: <span>{todos.length}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoHeader;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// 匯入其餘 Components\nimport InputForm from './InputForm.js';\nimport TodoList from './TodoList.js';\nimport FilterButtons from './FilterButtons.js';\nimport TodoHeader from './TodoHeader.js';\n\nfunction App () {\n  const [inputText, setInputText] = useState('');\n  // Todo 的內容要有 {assignment: xxx, isCompleted, id:xxx}\n  const [todos, setTodos] = useState([]);\n  const [filterState, setFilterState] = useState('all');\n  const [filterTodos, setFilterTodos] = useState([]);\n  const [isEditing, setIsEditing] = useState(null);\n  const [editingInput, setEditingInput] = useState('');\n  const [currentDate, setCurrentDate] = useState({});\n\n  // useEffect section\n  // useEffect(() => { changeFilterTodos(); }, []);\n  // useEffect => 每次 filterState 有更改的話就重新篩選\n  useEffect(() => { changeFilterTodos(); }, [filterState, todos]);\n  useEffect(() => { getCurrentDate(); }, []);\n\n  // 取得日期\n  function getCurrentDate () {\n    const monthList = [\n      { num: 0, month: 'January' },\n      { num: 1, month: 'February' },\n      { num: 2, month: 'March' },\n      { num: 3, month: 'April' },\n      { num: 4, month: 'May' },\n      { num: 5, month: 'June' },\n      { num: 6, month: 'July' },\n      { num: 7, month: 'August' },\n      { num: 8, month: 'September' },\n      { num: 9, month: 'October' },\n      { num: 10, month: 'November' },\n      { num: 11, month: 'December' }\n    ];\n    const dayOfWeekList = [\n      { num: 0, day: 'Sunday' },\n      { num: 1, day: 'Monday' },\n      { num: 2, day: 'Tuesday' },\n      { num: 3, day: 'Wednesday' },\n      { num: 4, day: 'Thursday' },\n      { num: 5, day: 'Friday' },\n      { num: 6, day: 'Saturday' }\n    ];\n\n    const tempMonth = new Date().getMonth();\n    const tempDay = new Date().getDay();\n    const month = monthList.filter((month) => month.num === tempMonth)[0].month;\n    const date = new Date().getDate();\n    const day = dayOfWeekList.filter((day) => day.num === tempDay)[0].day;\n\n    setCurrentDate({ month, date, day });\n  }\n\n  // 篩選需要的 Component\n  function changeFilterTodos () {\n    if (filterState === 'all') {\n      showAllTodos();\n    } else if (filterState === 'active') {\n      showOnlyActiveTodos();\n    } else if (filterState === 'completed') {\n      showOnlyCompletedTodos();\n    }\n  }\n\n  // 篩選判斷\n  function showOnlyCompletedTodos () {\n    setFilterTodos(todos.filter((todo) => todo.isCompleted === true));\n  }\n  function showOnlyActiveTodos () {\n    setFilterTodos(todos.filter((todo) => todo.isCompleted === false));\n  }\n  function showAllTodos () {\n    setFilterTodos(todos);\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"todo-card\">\n        <TodoHeader\n          currentDate={currentDate}\n          todos={todos}\n        />\n        <InputForm\n          inputText={inputText}\n          setInputText={setInputText}\n          setTodos={setTodos}\n          todos={todos}\n        />\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          filterState={filterState}\n          filterTodos={filterTodos}\n          setEditingInput={setEditingInput}\n          editingInput={editingInput}\n          isEditing={isEditing}\n          setIsEditing={setIsEditing}\n        />\n        <FilterButtons\n          setFilterState={setFilterState}\n          filterState={filterState}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}